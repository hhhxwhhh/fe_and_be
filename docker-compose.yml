services:
  # PostgreSQL数据库
  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: mydb
      POSTGRES_USER: root
      POSTGRES_PASSWORD: rootroot
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U root -d mydb" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis用于Channels
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 3s
      retries: 3

  # 后端Django应用
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    entrypoint: [ "sh", "-c", "chmod +x /app/init.sh && /app/init.sh" ]
    ports:
      - "8000:8000"
    environment:
      - DEBUG=1
      - DB_ENGINE=django.db.backends.postgresql
      - DB_NAME=mydb
      - DB_USER=root
      - DB_PASSWORD=rootroot
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DEEPSEEK_API_KEY=sk-7ab60319c915461981cc306de014a2e1
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - ./backend/media:/app/media
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # 前端Vue应用
  frontend:
    build:
      context: ./frontend/my-vue-app
      dockerfile: Dockerfile
      target: production-stage
      args:
        - NODE_ENV=production
    environment:
      - VITE_API_BASE_URL=/api
      - VITE_WS_BASE_URL=ws://backend:8000
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_healthy

volumes:
  postgres_data:
  redis_data:
